true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
# cbind(raw_X[[1]]$w_tilde[,2],W_tilde[,2])
cbind(original_X[[1]]$w_tilde[,2],W_tilde[,2],raw_X[[1]]$w_tilde[,2])
alpha=1
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
##### music ####
assaycounts <- raw_X[[1]]$counts
rownames(assaycounts) <- paste0('Gene',c(1:D))
colnames(assaycounts) <- paste0('Cell',c(1:ncol(assaycounts)))
pheno <- X[[1]]@meta.data
pheno$SampleID <- paste0('Cell',c(1:ncol(assaycounts)))
rownames(pheno) <- paste0('Cell',c(1:ncol(assaycounts)))
sc.eset <- ExpressionSet(assayData = assaycounts, phenoData = as(data.frame(pheno),"AnnotatedDataFrame"))
assaycounts <- Y0
rownames(assaycounts) <- paste0('Gene',c(1:D))
colnames(assaycounts) <- paste0('ID',c(1:N))
pheno <- data.frame('subjectID' = paste0('ID',c(1:N)))
rownames(pheno) <- paste0('ID',c(1:N))
bulk.eset <- ExpressionSet(assayData = assaycounts, phenoData = as(data.frame(pheno),"AnnotatedDataFrame"))
# Estimate cell type proportions
Est.prop = music_prop(bulk.eset = bulk.eset, sc.eset = sc.eset, clusters = 'Celltype_used',
samples = 'SampleID',  verbose = F)
names(Est.prop)
z_est_music <- t(Est.prop$Est.prop.weighted)
z_est_nnls <- t(Est.prop$Est.prop.allgene)
# plot(c(1:nrow(tau_w_est)),tau_w_est[,1])
#
#
#
# cbind(v_est[[k]][,i],true_v[,i])
# i=1
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=1")
# i=2
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=2")
#
plot(z_est,true_z, xlab = 'estmation',ylab='true', main = 'Z')
# plot(c(1:nrow(tau_w_est)),tau_w_est[,1])
#
#
#
# cbind(v_est[[k]][,i],true_v[,i])
# i=1
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=1")
# i=2
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=2")
#
plot(z_est,true_z, xlab = 'estmation',ylab='true', main = 'Z')
compare = data.frame(diff = c(as.vector(z_est_alpha1-true_z), as.vector(z_est_alpha05-true_z), as.vector(z_est_nnls-true_z),
as.vector(z_est_music-true_z)),
method = c(rep("alpha_1",K*N),rep("alpha_0.5",K*N), rep("NNLS",K*N),rep("MuSiC",K*N)),
para = "simulation10")
write.table(compare,'./write/simulation10.txt',quote = F,sep='\t',row.names = F)
## simulation1: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.1
## simulation2: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.5
## simulation3: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =1
## simulation4: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5
## simulation5: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5, corruption = .2
## simulation6: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .2
## simulation7: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .4
## simulation8: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.1, corruption = .4
## simulation9: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .4
## simulation10: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .6
boxplot(diff~method, data=compare)
median(z_est_alpha1-true_z)
median(z_est_alpha05-true_z)
median(z_est_nnls-true_z)
# plot(c(1:nrow(tau_w_est)),tau_w_est[,1])
#
#
#
# cbind(v_est[[k]][,i],true_v[,i])
# i=1
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=1")
# i=2
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=2")
#
plot(z_est,true_z, xlab = 'estmation',ylab='true', main = 'Z')
##### NNLS ####
z_est_nnls  <- sapply(c(1:N), function(j) nnls(W_tilde, Y0[,j])$x)
compare = data.frame(diff = c(as.vector(z_est_alpha1-true_z), as.vector(z_est_alpha05-true_z), as.vector(z_est_nnls-true_z),
as.vector(z_est_music-true_z)),
method = c(rep("alpha_1",K*N),rep("alpha_0.5",K*N), rep("NNLS",K*N),rep("MuSiC",K*N)),
para = "simulation10")
## simulation1: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.1
## simulation2: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.5
## simulation3: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =1
## simulation4: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5
## simulation5: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5, corruption = .2
## simulation6: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .2
## simulation7: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .4
## simulation8: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.1, corruption = .4
## simulation9: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .4
## simulation10: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .6
boxplot(diff~method, data=compare)
median(z_est_alpha1-true_z)
median(z_est_alpha05-true_z)
median(z_est_nnls-true_z)
corrupt_pi =  .8
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
Y0 = as.matrix(same_input$Y0)
X = same_input$X
T = same_input$T
K = same_input$K
D = same_input$D
c_k = same_input$c_k
C0 = sum(c_k)
W_tilde = same_input$W_tilde # observed w_tilde
YSG =  same_input$YSG
true_z = same_input$true_Z
true_w =  same_input$true_w$w
raw_X = same_input$raw_X # observation may after corruption
true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
# cbind(raw_X[[1]]$w_tilde[,2],W_tilde[,2])
cbind(original_X[[1]]$w_tilde[,2],W_tilde[,2],raw_X[[1]]$w_tilde[,2])
alpha=1
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$beta <- tau_xd_beta_para
tbl=tbl0
#   tbl.new <- table(Estimated_Gamma_bin,tbl$True_Gamma)
#   fdr <- tbl.new[2,1]/(D-sum(tbl$True_Gamma))
#   tpr <- tbl.new[2,2]/sum(tbl$True_Gamma)
#   ROC.df.1 <- rbind(ROC.df.1, c(fdr,tpr,cutoff))
# }
# ROC.df.1 <- ROC.df.1[-1,]
# plot(ROC.df.1$fdr,ROC.df.1$tpr)
# ROC.df.1$Method = "alpha_1"
#
# ROC.df <- rbind(ROC.df,ROC.df.1)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(beta)))+geom_roc(n.cuts = 0)
##### NNLS ####
z_est_nnls  <- sapply(c(1:N), function(j) nnls(W_tilde, Y0[,j])$x)
##### music ####
assaycounts <- raw_X[[1]]$counts
rownames(assaycounts) <- paste0('Gene',c(1:D))
colnames(assaycounts) <- paste0('Cell',c(1:ncol(assaycounts)))
pheno <- X[[1]]@meta.data
pheno$SampleID <- paste0('Cell',c(1:ncol(assaycounts)))
rownames(pheno) <- paste0('Cell',c(1:ncol(assaycounts)))
sc.eset <- ExpressionSet(assayData = assaycounts, phenoData = as(data.frame(pheno),"AnnotatedDataFrame"))
assaycounts <- Y0
rownames(assaycounts) <- paste0('Gene',c(1:D))
colnames(assaycounts) <- paste0('ID',c(1:N))
pheno <- data.frame('subjectID' = paste0('ID',c(1:N)))
rownames(pheno) <- paste0('ID',c(1:N))
bulk.eset <- ExpressionSet(assayData = assaycounts, phenoData = as(data.frame(pheno),"AnnotatedDataFrame"))
# Estimate cell type proportions
Est.prop = music_prop(bulk.eset = bulk.eset, sc.eset = sc.eset, clusters = 'Celltype_used',
samples = 'SampleID',  verbose = F)
names(Est.prop)
z_est_music <- t(Est.prop$Est.prop.weighted)
compare = data.frame(diff = c(as.vector(z_est_alpha1-true_z), as.vector(z_est_alpha05-true_z), as.vector(z_est_nnls-true_z),
as.vector(z_est_music-true_z)),
method = c(rep("alpha_1",K*N),rep("alpha_0.5",K*N), rep("NNLS",K*N),rep("MuSiC",K*N)),
para = "simulation11")
write.table(compare,'./write/simulation11.txt',quote = F,sep='\t',row.names = F)
## simulation2: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.5
## simulation3: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =1
## simulation4: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5
## simulation5: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5, corruption = .2
## simulation6: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .2
## simulation7: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .4
## simulation8: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.1, corruption = .4
## simulation9: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .4
## simulation10: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .6
## simulation11: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .8
boxplot(diff~method, data=compare)
# plot(c(1:nrow(tau_w_est)),tau_w_est[,1])
#
#
#
# cbind(v_est[[k]][,i],true_v[,i])
# i=1
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=1")
# i=2
# plot(w_est[[i]],true_w[[i]], xlab = 'estmation',ylab='true', main="W t=2")
#
plot(z_est,true_z, xlab = 'estmation',ylab='true', main = 'Z')
## simulation2: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =0.5
## simulation3: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=1,tau_xd =1
## simulation4: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5
## simulation5: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.5, corruption = .2
## simulation6: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .2
## simulation7: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =1, corruption = .4
## simulation8: T=5, D=500, K=8,mu=1,tau_v=4,tau_w=.5,tau_xd =.1, corruption = .4
## simulation9: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .4
## simulation10: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .6
## simulation11: T=5, D=500, K=8,mu=5,tau_v=1,tau_w=.5,tau_xd =.1, corruption = .8
boxplot(diff~method, data=compare)
median(z_est_alpha1-true_z)
median(z_est_alpha05-true_z)
median(z_est_nnls-true_z)
# i=1
# k=30
# average_gamma_est <- Reduce('+',gamma_est)/mcmc_samples_theta1
# cbind(gamma_est[[k]][,i]*v_est[[k]][,i],true_gamma[,i]*true_v[,i])
# tbl <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
# boxplot(Estmated_Gamma~True_Gamma,data=tbl)
tbl$Estimated_Gamma_bin <- 1*(tbl$Estmated_Gamma >= .5)
# tbl$Method = 'alpha_1'
print(tbl)
#   tbl.new <- table(Estimated_Gamma_bin,tbl$True_Gamma)
#   fdr <- tbl.new[2,1]/(D-sum(tbl$True_Gamma))
#   tpr <- tbl.new[2,2]/sum(tbl$True_Gamma)
#   ROC.df.1 <- rbind(ROC.df.1, c(fdr,tpr,cutoff))
# }
# ROC.df.1 <- ROC.df.1[-1,]
# plot(ROC.df.1$fdr,ROC.df.1$tpr)
# ROC.df.1$Method = "alpha_1"
#
# ROC.df <- rbind(ROC.df,ROC.df.1)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(beta)))+geom_roc(n.cuts = 0)
# tbl$Method = 'alpha_1'
# print(tbl)
print(table(tbl$Estimated_Gamma_bin,tbl$True_Gamma))
source('SAME/run_Simulation.R')
tau_w_para = 1
tau_xd_beta_para = .1
corrupt_pi =  .8
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
Y0 = as.matrix(same_input$Y0)
X = same_input$X
T = same_input$T
K = same_input$K
D = same_input$D
c_k = same_input$c_k
C0 = sum(c_k)
W_tilde = same_input$W_tilde # observed w_tilde
YSG =  same_input$YSG
true_z = same_input$true_Z
true_w =  same_input$true_w$w
raw_X = same_input$raw_X # observation may after corruption
true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
# Starting values
mcmc_samples_theta1 = 50
Lambda = c(0:mcmc_samples_theta1) # Lambda = c(0,1,2,3,...,100)
alpha=1
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$beta <- tau_xd_beta_para
tbl=tbl0
#   tbl.new <- table(Estimated_Gamma_bin,tbl$True_Gamma)
#   fdr <- tbl.new[2,1]/(D-sum(tbl$True_Gamma))
#   tpr <- tbl.new[2,2]/sum(tbl$True_Gamma)
#   ROC.df.1 <- rbind(ROC.df.1, c(fdr,tpr,cutoff))
# }
# ROC.df.1 <- ROC.df.1[-1,]
# plot(ROC.df.1$fdr,ROC.df.1$tpr)
# ROC.df.1$Method = "alpha_1"
#
# ROC.df <- rbind(ROC.df,ROC.df.1)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(beta)))+geom_roc(n.cuts = 0)
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- corruption_prob
tbl=tbl0
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)
tbl=tbl0
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- corruption_prob
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- corruption_pi
tbl=tbl0
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- corrupt_pi
tbl=tbl0
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)+labs('corruption_prob')
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)+labs(fill='corruption_prob')
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+geom_roc(n.cuts = 0)+labs(fill="corruption_prob")
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=factor(corruption_prob)))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
tbl0$corruption_prob <- factor(corrupt_pi)
tbl=tbl0
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=corruption_prob))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
corrupt_pi =  .6
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
Y0 = as.matrix(same_input$Y0)
X = same_input$X
T = same_input$T
K = same_input$K
D = same_input$D
c_k = same_input$c_k
C0 = sum(c_k)
W_tilde = same_input$W_tilde # observed w_tilde
YSG =  same_input$YSG
true_z = same_input$true_Z
true_w =  same_input$true_w$w
raw_X = same_input$raw_X # observation may after corruption
true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- factor(corrupt_pi)
#tbl=tbl0
tbl = rbind(tbl,tbl0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=corruption_prob))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
corrupt_pi =  .4
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
Y0 = as.matrix(same_input$Y0)
X = same_input$X
T = same_input$T
K = same_input$K
D = same_input$D
c_k = same_input$c_k
C0 = sum(c_k)
W_tilde = same_input$W_tilde # observed w_tilde
YSG =  same_input$YSG
true_z = same_input$true_Z
true_w =  same_input$true_w$w
raw_X = same_input$raw_X # observation may after corruption
true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- factor(corrupt_pi)
#tbl=tbl0
tbl = rbind(tbl,tbl0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=corruption_prob))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
corrupt_pi =  .2
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
Y0 = as.matrix(same_input$Y0)
X = same_input$X
T = same_input$T
K = same_input$K
D = same_input$D
c_k = same_input$c_k
C0 = sum(c_k)
W_tilde = same_input$W_tilde # observed w_tilde
YSG =  same_input$YSG
true_z = same_input$true_Z
true_w =  same_input$true_w$w
raw_X = same_input$raw_X # observation may after corruption
true_v = same_input$true_w$v
true_gamma = same_input$true_w$gamma
original_X = same_input$X_original # single cell before corruption
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- factor(corrupt_pi)
#tbl=tbl0
tbl = rbind(tbl,tbl0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=corruption_prob))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
corrupt_pi =  0
########
set.seed(2020)
same_input <- generate_same_input(T,D,K,pi_ber,N,Iteration,corrupt_pi=corrupt_pi)
str_para = paste0("T=",T,".D=",D,".K=",K,".corrupt=",corrupt_pi,".tauW=",tau_w_para,".tauXdBeta=",tau_xd_beta_para)
alpha=.5
rst <- SAME(Y0, X, W_tilde,
mcmc_samples_theta1, Lambda, c_k, YSG, alpha =alpha)
saveRDS(rst,paste0('/Users/wenxuandeng/GoogleDrive/sucksalt/SC/sc_immune/code/sc_immune_copy/write/rst.alpha=',alpha,'.',str_para,'.rds'))
if(alpha==1){
z_est_alpha1 <- rst$theta1$z
}else{
z_est_alpha05 <- rst$theta1$z
}
average_gamma_est <- Reduce('+',rst$theta2$gamma)/mcmc_samples_theta1
tbl0 <- data.frame('Estmated_Gamma' = average_gamma_est[,i],"True_Gamma" = true_gamma[,i])
tbl0$corruption_prob <- factor(corrupt_pi)
#tbl=tbl0
tbl = rbind(tbl,tbl0)
ggplot(tbl, aes(d=True_Gamma,m=Estmated_Gamma,color=corruption_prob))+labs(fill="corruption_prob")+geom_roc(n.cuts = 0)
compare1 >- read.table('./write/simulation1.txt',sep='\t')
compare1 <- read.table('./write/simulation1.txt',sep='\t')
head(compare1)
compare1 <- read.table('./write/simulation1.txt',sep='\t',header =T)
head(compare1)
compare2 <- read.table('./write/simulation2.txt',sep='\t',header =T)
compare3 <- read.table('./write/simulation3.txt',sep='\t',header =T)
compare4 <- read.table('./write/simulation4.txt',sep='\t',header =T)
compare <- rbind(compare1,compare2,compare3,compare4)
ggplot(compare, aes(x=para,y=diff,fill=method))+geom_boxplot()
compare1 <- read.table('./write/simulation1.txt',sep='\t',header =T)
compare1 <- "tau_w=1,tau_xd =0.1"
compare2 <- read.table('./write/simulation2.txt',sep='\t',header =T)
compare2 <- "tau_w=1,tau_xd =0.5"
compare3 <- read.table('./write/simulation3.txt',sep='\t',header =T)
compare3 <- "tau_w=1,tau_xd =1"
compare4 <- read.table('./write/simulation4.txt',sep='\t',header =T)
compare4 <- "tau_w=.5,tau_xd =.5"
compare <- rbind(compare1,compare2,compare3,compare4)
ggplot(compare, aes(x=para,y=diff,fill=method))+geom_boxplot()
compare1 <- read.table('./write/simulation1.txt',sep='\t',header =T)
compare1 <- "tau_w=1_tau_xd=0.1"
compare2 <- read.table('./write/simulation2.txt',sep='\t',header =T)
compare2 <- "tau_w=1_tau_xd=0.5"
compare3 <- read.table('./write/simulation3.txt',sep='\t',header =T)
compare3 <- "tau_w=1_tau_xd=1"
compare4 <- read.table('./write/simulation4.txt',sep='\t',header =T)
compare4 <- "tau_w=.5_tau_xd=.5"
compare <- rbind(compare1,compare2,compare3,compare4)
ggplot(compare, aes(x=para,y=diff,fill=method))+geom_boxplot()
head(compare)
compare1 <- read.table('./write/simulation1.txt',sep='\t',header =T)
compare1$para <- "tau_w=1_tau_xd=0.1"
compare2 <- read.table('./write/simulation2.txt',sep='\t',header =T)
compare2$para <- "tau_w=1_tau_xd=0.5"
compare3 <- read.table('./write/simulation3.txt',sep='\t',header =T)
compare3$para <- "tau_w=1_tau_xd=1"
compare4 <- read.table('./write/simulation4.txt',sep='\t',header =T)
compare4$para <- "tau_w=.5_tau_xd=.5"
compare <- rbind(compare1,compare2,compare3,compare4)
ggplot(compare, aes(x=para,y=diff,fill=method))+geom_boxplot()
str(pheno)
names(Est.prop)
str(Est.prop)
which(Est.prop$Weight.gene<0)
